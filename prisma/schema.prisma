// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thoughts   Thought[]
  categories Category[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#6366f1") // Hex color for the category
  icon        String?  // Icon name for the category
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  thoughts Thought[]

  @@unique([name, userId])
  @@map("categories")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  thoughts ThoughtTag[]

  @@map("tags")
}

model Thought {
  id          String    @id @default(cuid())
  title       String
  content     String
  color       String    @default("#6366f1")
  isFavorite  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  userId      String
  categoryId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  archivedAt  DateTime?

  // Relations
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags     ThoughtTag[]

  @@map("thoughts")
}

model ThoughtTag {
  id        String @id @default(cuid())
  thoughtId String
  tagId     String

  // Relations
  thought Thought @relation(fields: [thoughtId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([thoughtId, tagId])
  @@map("thought_tags")
}
